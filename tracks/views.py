import time

from django.core.cache import cache
from django.core.paginator import Paginator
from django.db.models import Count
from django.db.models import Q, F
from django.http import HttpResponseBadRequest
from django.shortcuts import render, get_object_or_404, redirect
from django.urls import reverse

from .forms import InquiryForm
from .models import Track, Genre
from .notify import notify_telegram

VIEW_COOLDOWN = 60 * 60  # 1 –≥–æ–¥–∏–Ω–∞

GENDER_SLUGS = {"female", "male"}

LICENSE_MAP = {
    "nonex": "non_exclusive",  # ?license=nonex ‚Üí Non-exclusive
    "excl": "exclusive",  # ?license=excl  ‚Üí Exclusive
    "stems": "exclusive_stems",  # ?license=stems ‚Üí Exclusive+ (STEMS)
}

PAGE_SIZE_DEFAULT = 21


def how_it_works(request):
    return render(request, "tracks/how_it_works.html")

def catalog(request):
    # –ë–∞–∑–æ–≤–∏–π queryset
    qs = (
        Track.objects.all()
        .order_by("-is_featured", "-created_at")  # –∞–±–æ —è–∫ —Ç–æ–±—ñ —Ç—Ä–µ–±–∞
        .prefetch_related("genres")
    )

    # –§—ñ–ª—å—Ç—Ä –∑–∞ –∂–∞–Ω—Ä–æ–º (–æ–ø—Ü—ñ–π–Ω–æ)
    genre_slug = request.GET.get("genre")
    active_genre = None
    if genre_slug:
        active_genre = Genre.objects.filter(slug=genre_slug).first()
        if active_genre:
            qs = qs.filter(genres=active_genre)

    # –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è: 20 –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
    paginator = Paginator(qs, 21)
    page_number = request.GET.get("page", 1)
    page_obj = paginator.get_page(page_number)  # –∑—Ä—É—á–Ω–æ: —Å–∞–º –ª–æ–≤–∏—Ç—å –ø–æ–º–∏–ª–∫–∏ —ñ –¥–∞—î –≤–∞–ª—ñ–¥–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É

    context = {
        "page_obj": page_obj,
        "tracks": page_obj.object_list,  # ‚Üê –í–ê–ñ–õ–ò–í–û: —É —à–∞–±–ª–æ–Ω –π–¥—É—Ç—å –ª–∏—à–µ –µ–ª–µ–º–µ–Ω—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        "paginator": paginator,
        "genres": Genre.objects.all().order_by("name"),  # —á—ñ–ø—Å–∏ –∑–≤–µ—Ä—Ö—É
        "active_genre": active_genre,
    }
    return render(request, "tracks/track_list.html", context)


def home(request):
    featured = Track.objects.filter(is_featured=True).order_by("-created_at")[:6]
    latest = Track.objects.order_by("-created_at")[:6]
    top_genres = Genre.objects.annotate(n=Count("tracks")).order_by("-n", "name")[:12]
    return render(request, "tracks/home.html", {
        "featured": featured,
        "latest": latest,
        "top_genres": top_genres,
    })


PRIMARY_TOKENS = {"female", "male"}  # —â–æ –≤–≤–∞–∂–∞—Ç–∏ ¬´–æ—Å–Ω–æ–≤–Ω–∏–º–∏¬ª –∂–∞–Ω—Ä–∞–º–∏

def is_primary_genre(g):
    slug = (g.slug or "").strip().lower()
    name = (g.name or "").strip().lower()
    return slug in PRIMARY_TOKENS or name in PRIMARY_TOKENS

def track_list(request):
    genre_slug = request.GET.get("genre")

    tracks_qs = (
        Track.objects.all()
        .prefetch_related("genres")
        .order_by("-created_at")
    )

    active_genre = None
    if genre_slug:
        active_genre = Genre.objects.filter(slug=genre_slug).first()
        if active_genre:
            tracks_qs = tracks_qs.filter(genres=active_genre).distinct()

    paginator = Paginator(tracks_qs, 20)
    page_obj = paginator.get_page(request.GET.get("page"))

    # –±–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ –∂–∞–Ω—Ä–∏, —è–∫—ñ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏–≤‚Äô—è–∑–∞–Ω—ñ –¥–æ —Ç—Ä–µ–∫—ñ–≤
    all_genres = (
        Genre.objects.filter(tracks__isnull=False)
        .distinct()
        .order_by("name")
    )

    # –æ—Å–Ω–æ–≤–Ω—ñ (male/female) ‚Äî –ø–æ slug –∞–±–æ name
    def is_primary(g):
        s = (g.slug or "").lower()
        n = (g.name or "").lower()
        return s in ("male", "female") or n in ("male", "female")

    primary_genres = [g for g in all_genres if is_primary(g)]
    other_genres   = [g for g in all_genres if not is_primary(g)]

    # —è–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∂–∞–Ω—Ä —É ‚Äú—ñ–Ω—à–∏—Ö‚Äù, —Ä–æ–∑–∫—Ä–∏—î–º–æ —ó—Ö –∑—Ä–∞–∑—É
    open_all_genres = bool(active_genre and not is_primary(active_genre))

    return render(
        request,
        "tracks/track_list.html",
        {
            "tracks": page_obj,
            "page_obj": page_obj,
            "paginator": paginator,

            "active_genre": active_genre,
            "primary_genres": primary_genres,
            "other_genres": other_genres,
            "open_all_genres": open_all_genres,
        },
    )

def order_page(request):
    """–§–æ—Ä–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ anti-bot, rate-limit, —Ç–∞ –ø—Ä–µ—Ñ—ñ–ª–æ–º —Ç—Ä–µ–∫—É/–ª—ñ—Ü–µ–Ω–∑—ñ—ó –∑ query."""
    # ---- Rate limit: –Ω–µ –±—ñ–ª—å—à–µ 5 POST –∑–∞ 10 —Ö–≤ –∑ IP
    if request.method == "POST":
        ip = request.META.get("HTTP_X_FORWARDED_FOR", "").split(",")[0] or request.META.get("REMOTE_ADDR")
        key = f"order_rate:{ip}"
        hits = cache.get(key, 0) + 1
        cache.set(key, hits, timeout=60 * 10)  # 10 —Ö–≤
        if hits > 5:
            return HttpResponseBadRequest("–ó–∞–±–∞–≥–∞—Ç–æ —Å–ø—Ä–æ–±. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ, –±—Ä–∞—Ç–∞–Ω.")

    # ---- GET: —Å—Ç–∞–≤–∏–º–æ –º—ñ—Ç–∫—É —á–∞—Å—É (anti-bot)
    if request.method == "GET":
        request.session["order_started_at"] = int(time.time())

    # ---- –í–∏—Ç—è–≥—É—î–º–æ —Ç—Ä–µ–∫ (—ñ–∑ GET –∞–±–æ POST)
    track_id = request.GET.get("track") if request.method == "GET" else request.POST.get("track")
    track = get_object_or_404(Track, id=track_id) if track_id else None

    if request.method == "POST":
        # Anti-bot: –∑–∞–Ω–∞–¥—Ç–æ —à–≤–∏–¥–∫–∏–π —Å–∞–±–º—ñ—Ç
        started = int(request.session.get("order_started_at", 0))
        if started and time.time() - started < 3:
            return HttpResponseBadRequest("–ó–¥–∞—î—Ç—å—Å—è, –±–æ—Ç. –ó–∞–ø–æ–≤–Ω—é–π —Ñ–æ—Ä–º—É –Ω–µ —Ç–∞–∫ –±–ª–∏—Å–∫–∞–≤–∏—á–Ω–æ :)")

        form = InquiryForm(request.POST)
        if form.is_valid():
            inquiry = form.save()

            # –¢–µ–ª–µ–≥–∞ ‚Äî —è–∫ —É —Ç–µ–±–µ –±—É–ª–æ
            msg = (
                "üö® <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞</b>\n"
                f"üéµ –¢—Ä–µ–∫: {inquiry.track.title if inquiry.track else '‚Äî'}\n"
                f"üë§ –Ü–º‚Äô—è: {inquiry.name}\n"
                f"üì¨ –ö–æ–Ω—Ç–∞–∫—Ç: {inquiry.contact}\n"
                f"üßæ –õ—ñ—Ü–µ–Ω–∑—ñ—è: {inquiry.get_license_type_display()}\n"
                f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {inquiry.message[:500] or '‚Äî'}"
            )
            notify_telegram(msg)

            return redirect(reverse("order_thanks") + f"?id={inquiry.id}")
        else:
            # –≤–ø–∞–≤ –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä ‚Äî –≤—ñ–¥–º–∞–ª—é—î–º–æ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏
            return render(request, "tracks/order_page.html", {"form": form, "track": track})

    # ---- GET: –≥–æ—Ç—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
    initial = {}
    if track:
        initial["track"] = track

    # –ü—Ä–µ—Ñ—ñ–ª –ª—ñ—Ü–µ–Ω–∑—ñ—ó –∑ ?license=
    lic_qs = request.GET.get("license")
    if lic_qs in LICENSE_MAP:
        initial["license_type"] = LICENSE_MAP[lic_qs]

    form = InquiryForm(initial=initial)
    return render(request, "tracks/order_page.html", {"form": form, "track": track})


def order_thanks(request):
    return render(request, "tracks/order_thanks.html")


def track_detail(request, slug):
    track = get_object_or_404(Track.objects.prefetch_related("genres"), slug=slug)

    viewed = request.session.get("viewed_tracks", {})  # { "id": ts }
    now = int(time.time())
    last = int(viewed.get(str(track.id), 0))
    if now - last > VIEW_COOLDOWN:
        Track.objects.filter(pk=track.pk).update(view_count=F("view_count") + 1)
        viewed[str(track.id)] = now
        request.session["viewed_tracks"] = viewed

    gender_tags = [g for g in track.genres.all() if g.slug in GENDER_SLUGS]
    other_tags = [g for g in track.genres.all() if g.slug not in GENDER_SLUGS]

    related = (Track.objects
               .filter(~Q(id=track.id), genres__in=track.genres.all())
               .distinct()
               .order_by("-is_featured", "-created_at")[:6])

    return render(request, "tracks/track_detail.html", {
        "track": track,
        "gender_tags": gender_tags,
        "other_tags": other_tags,
        "related": related,
    })
